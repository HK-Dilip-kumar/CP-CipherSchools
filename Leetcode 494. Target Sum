class Solution {
public:
    unordered_map<string, int>memo;
    int solve(vector<int>&nums, int currentIndex, int target, int sum){
        if(currentIndex == nums.size()){
            return sum == target ? 1 : 0;
        }
        string key = to_string(currentIndex) + "|" + to_string(sum);
        if(memo.count(key) == 0){
            // take +
            int result = solve(nums, currentIndex+1, target, sum + nums[currentIndex]) + 
                solve(nums, currentIndex+1, target, sum - nums[currentIndex]);
            memo[key] = result;
        }
        return memo[key];
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        if(nums.size() == 0 && target == 0){
            return 0;
        }
        int ans = solve(nums, 0, target, 0);
        return ans;
    }
};
